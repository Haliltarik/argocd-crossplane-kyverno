# apps/kyverno-policies/base/require-s3-ssl.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: audit-s3-bucket-security
  annotations:
    policies.kyverno.io/title: Audit S3 Bucket Security Policies
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Bucket
    policies.kyverno.io/description: >-
      Audits that S3 buckets have the required TLS 1.2 + HTTPS security policies.
      This policy DOES NOT MODIFY buckets, it only validates them.
spec:
  validationFailureAction: audit  # ✅ AUDIT only (no blocking)
  background: true
  rules:
    - name: check-tls-12-policy-present
      match:
        any:
          - resources:
              kinds:
                - Bucket
              apiGroups:
                - s3.aws.crossplane.io
      validate:
        message: |
          ⚠️ AUDIT: This bucket should have a TLS 1.2 minimum policy.
          
          Note: This is an informational check. The policy is injected by Crossplane.
        deny:
          conditions:
            any:
              # Check for s3:TlsVersion in the policy
              - key: "{{ contains(to_string(request.object.spec.forProvider.policy), 's3:TlsVersion') }}"
                operator: Equals
                value: false

    - name: check-https-policy-present
      match:
        any:
          - resources:
              kinds:
                - Bucket
              apiGroups:
                - s3.aws.crossplane.io
      validate:
        message: |
          ⚠️ AUDIT: This bucket should have an HTTPS policy.
          
          Expected policy: aws:SecureTransport = false with Effect Deny
          
          Note: This is an informational check. The policy is injected by Crossplane.
        deny:
          conditions:
            any:
              # Check for aws:SecureTransport in the policy
              - key: "{{ contains(to_string(request.object.spec.forProvider.policy), 'aws:SecureTransport') }}"
                operator: Equals
                value: false

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-s3-claim-requirements
  annotations:
    policies.kyverno.io/title: Enforce S3 BucketClaim Requirements
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: BucketClaim, XBucket
    policies.kyverno.io/description: >-
      BLOCKS BucketClaims that do not specify requireSSL and encryption.
      Buckets will then be created by Crossplane with the proper policies.
spec:
  validationFailureAction: enforce  # ✅ ENFORCE on claims (blocks)
  background: true
  rules:
    - name: require-ssl-in-claims
      match:
        any:
          - resources:
              kinds:
                - BucketClaim
              apiGroups:
                - s3.aws.engie.org
      validate:
        message: |
          ❌ SECURITY REQUIRED: requireSSL must be enabled.
          
          This parameter ensures that Crossplane will create the bucket with:
          - HTTPS mandatory policy (aws:SecureTransport)
          - TLS 1.2 minimum policy (s3:TlsVersion >= 1.2)
          
          Required action: Add to your BucketClaim:
                  - op: add
                    path: /spec/requireSSL
                    value: true          
          
          Documentation: https://wiki.engie.com/s3-security-tls12
          Support: #platform-engineering
        pattern:
          spec:
            requireSSL: true

    - name: require-encryption-in-claims
      match:
        any:
          - resources:
              kinds:
                - BucketClaim
              apiGroups:
                - s3.aws.engie.org
      validate:
        message: |
          ❌ ENCRYPTION REQUIRED: encryption must be enabled.
          
          This parameter ensures that Crossplane will create the bucket with:
          - AES-256 encryption at rest
          - Public access blocked
          
          Required action: Add to your BucketClaim:
                  - op: add
                    path: /spec/encryption
                    value: true
          
          Documentation: https://wiki.engie.com/s3-security-encryption
          Support: #platform-engineering
        pattern:
          spec:
            encryption: true

    - name: require-ssl-in-xbuckets
      match:
        any:
          - resources:
              kinds:
                - XBucket
              apiGroups:
                - s3.aws.engie.org
      validate:
        message: |
          ❌ SECURITY REQUIRED: XBucket must have requireSSL and encryption enabled.
        pattern:
          spec:
            requireSSL: true
            encryption: true

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: enforce-s3-encryption-config
  annotations:
    policies.kyverno.io/title: Enforce S3 Encryption Configuration
    policies.kyverno.io/category: Security
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Bucket
spec:
  validationFailureAction: enforce  # ✅ ENFORCE (blocks if non-compliant)
  background: true
  rules:
    - name: require-server-side-encryption
      match:
        any:
          - resources:
              kinds:
                - Bucket
              apiGroups:
                - s3.aws.crossplane.io
      validate:
        message: |
          ❌ ENCRYPTION MISSING: Bucket must have serverSideEncryptionConfiguration.
          
          This configuration must be injected by the Crossplane composition.
        pattern:
          spec:
            forProvider:
              serverSideEncryptionConfiguration:
                rules:
                  - applyServerSideEncryptionByDefault:
                      sseAlgorithm: "AES256 | aws:kms"

    - name: require-public-access-block
      match:
        any:
          - resources:
              kinds:
                - Bucket
              apiGroups:
                - s3.aws.crossplane.io
      validate:
        message: |
          ❌ PUBLIC ACCESS NOT BLOCKED: Bucket must have publicAccessBlockConfiguration.
          
          This configuration must be injected by the Crossplane composition.
        pattern:
          spec:
            forProvider:
              publicAccessBlockConfiguration:
                blockPublicAcls: true
                blockPublicPolicy: true
                ignorePublicAcls: true
                restrictPublicBuckets: true