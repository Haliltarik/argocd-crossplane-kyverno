apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: s3bucket-default
spec:
  compositeTypeRef:
    apiVersion: s3.aws.engie.org/v1alpha1
    kind: XBucket
  mode: Pipeline
  pipeline:
    - step: s3bucket
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: v1
        kind: PatchSet
        resources:
          # 1️⃣ Le Bucket S3 principal
          - name: s3bucket
            base:
              apiVersion: s3.aws.crossplane.io/v1beta1
              kind: Bucket
              spec:
                providerConfigRef:
                  name: default
                deletionPolicy: Delete
                forProvider:
                  acl: private
                  versioningConfiguration:
                    status: Enabled
                  publicAccessBlockConfiguration:
                    blockPublicAcls: true
                    blockPublicPolicy: true
                    ignorePublicAcls: true
                    restrictPublicBuckets: true
                  serverSideEncryptionConfiguration:
                    rules:
                      - applyServerSideEncryptionByDefault:
                          sseAlgorithm: AES256
                  tagging:
                    tagSet: []
            patches:
              - fromFieldPath: "spec.bucketName"
                toFieldPath: "metadata.name"
              - fromFieldPath: "spec.location"
                toFieldPath: "spec.forProvider.locationConstraint"
              - fromFieldPath: "spec.tags"
                toFieldPath: "spec.forProvider.tagging.tagSet"

          # 2️⃣ La BucketPolicy S3 (créée uniquement si requireSSL = true)
          - name: s3bucketpolicy
            base:
              apiVersion: s3.aws.crossplane.io/v1beta1
              kind: BucketPolicy
              spec:
                providerConfigRef:
                  name: default
                forProvider:
                  bucketName: ""
                  policy: {}
            patches:
              # On conditionne la création sur requireSSL = true
              - type: ToCompositeFieldPath
                fromFieldPath: "spec.requireSSL"
                policy:
                  fromFieldPath: Required
                transforms:
                  - type: map
                    map:
                      "true": "create"

              # Patch du nom du bucket dans la policy
              - fromFieldPath: "spec.bucketName"
                toFieldPath: "spec.forProvider.bucketName"

              # Génération de la policy HTTPS + TLS1.2 dynamique
              - type: CombineFromComposite
                combine:
                  variables:
                    - fromFieldPath: "spec.bucketName"
                    - fromFieldPath: "spec.bucketName"
                    - fromFieldPath: "spec.bucketName"
                    - fromFieldPath: "spec.bucketName"
                  strategy: string
                  string:
                    fmt: |
                      {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Sid": "DenyNonSSLRequests",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": [
                              "arn:aws:s3:::%s",
                              "arn:aws:s3:::%s/*"
                            ],
                            "Condition": { "Bool": { "aws:SecureTransport": "false" } }
                          },
                          {
                            "Sid": "DenyOldTLSVersions",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": [
                              "arn:aws:s3:::%s",
                              "arn:aws:s3:::%s/*"
                            ],
                            "Condition": { "NumericLessThan": { "s3:TlsVersion": "1.2" } }
                          }
                        ]
                      }
                toFieldPath: "spec.forProvider.policy"
